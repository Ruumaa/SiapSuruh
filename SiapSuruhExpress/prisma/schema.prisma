// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           String     @id @default(uuid())
  username     String     @unique
  password     String
  email        String     @unique
  phone_number Int?
  address      String?
  img_url      String?
  role         Role       @default(USER)
  Provider     Provider[]
}

enum Role {
  USER
  ADMIN
  PROVIDER
}

model Provider {
  id                 String               @id @default(uuid())
  user_id            String
  rating             Float?
  total_reviews      Int?
  provider_name      String?
  bio                String?
  User               User                 @relation(fields: [user_id], references: [id])
  categories         Category[]
  Service            Service[]
  ProviderCategories ProviderCategories[]
}

model Category {
  id                 String               @id @default(uuid())
  name               String
  description        String?
  Provider           Provider[]
  created_at         DateTime             @default(now())
  updated_at         DateTime             @updatedAt
  ProviderCategories ProviderCategories[]
}

model Service {
  id          String   @id @default(uuid())
  provider_id String
  title       String
  description String
  price       Int?
  Provider    Provider @relation(fields: [provider_id], references: [id])
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

model ProviderCategories {
  provider_id String
  category_id String

  // Relasi ke Provider
  provider Provider @relation(fields: [provider_id], references: [id])
  // Relasi ke Category
  category Category @relation(fields: [category_id], references: [id])

  @@id([provider_id, category_id]) // Composite Primary Key
}

model Order {
  id             String        @id @default(uuid())
  user_id        String
  service_id     String
  provider_id    String
  details        String
  location       String
  status         OrderStatus   @default(PENDING)
  order_date     DateTime
  total_price    Decimal
  // payment_method 
  payment_status PaymentStatus @default(PENDING)
}

model Report {
  id                   String       @id @default(uuid())
  reported_by_id       String
  reported_provider_id String
  description          String?
  action_taken         ActionTaken? @default(PENDING)
  admin_id             String
  action_reason        String?
  blocked_until        DateTime?
}

enum ActionTaken {
  PENDING
  NONE
  SUSPENSION
  DELETION
}

enum OrderStatus {
  PENDING
  ACCEPTED
  PROCCESSED
  COMPLETED
  REJECTED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}
